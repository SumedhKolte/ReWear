# ============================================================================
# Items Search API Docker Compose Configuration
# For local development and testing
# ============================================================================

version: '3.8'

services:
  # ============================================================================
  # Application Service
  # ============================================================================
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: items-search-api
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - PORT=3000
      - RDS_HOSTNAME=postgres
      - RDS_PORT=5432
      - RDS_DB_NAME=items_search_db
      - RDS_USERNAME=postgres
      - RDS_PASSWORD=password
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=
      - JWT_SECRET=your-development-jwt-secret
      - LOG_LEVEL=debug
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs
      - ./src:/app/src:ro  # Read-only mount for development
    networks:
      - items-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # ============================================================================
  # PostgreSQL Database Service
  # ============================================================================
  postgres:
    image: postgres:15-alpine
    container_name: items-postgres
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=items_search_db
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/schema.sql:/docker-entrypoint-initdb.d/01-schema.sql:ro
      - ./database/seed.sql:/docker-entrypoint-initdb.d/02-seed.sql:ro
    networks:
      - items-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d items_search_db"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    command: >
      postgres
      -c shared_preload_libraries=pg_stat_statements
      -c pg_stat_statements.track=all
      -c max_connections=200
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
      -c work_mem=16MB
      -c maintenance_work_mem=64MB
      -c random_page_cost=1.1
      -c effective_io_concurrency=200
      -c checkpoint_completion_target=0.9
      -c wal_buffers=16MB
      -c default_statistics_target=100

  # ============================================================================
  # Redis Cache Service
  # ============================================================================
  redis:
    image: redis:7-alpine
    container_name: items-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./redis.conf:/usr/local/etc/redis/redis.conf:ro
    networks:
      - items-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    command: redis-server /usr/local/etc/redis/redis.conf
    sysctls:
      - net.core.somaxconn=65535

  # ============================================================================
  # Development Tools (Optional)
  # ============================================================================
  
  # pgAdmin for database management
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: items-pgadmin
    restart: unless-stopped
    ports:
      - "8080:80"
    environment:
      - PGADMIN_DEFAULT_EMAIL=admin@example.com
      - PGADMIN_DEFAULT_PASSWORD=admin
      - PGADMIN_CONFIG_SERVER_MODE=False
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    networks:
      - items-network
    profiles:
      - tools

  # Redis Commander for cache management
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: items-redis-commander
    restart: unless-stopped
    ports:
      - "8081:8081"
    environment:
      - REDIS_HOSTS=local:redis:6379
    networks:
      - items-network
    profiles:
      - tools

  # Nginx for load balancing (production-like setup)
  nginx:
    image: nginx:alpine
    container_name: items-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - app
    networks:
      - items-network
    profiles:
      - production

# ============================================================================
# Volumes
# ============================================================================
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  pgadmin_data:
    driver: local

# ============================================================================
# Networks
# ============================================================================
networks:
  items-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
